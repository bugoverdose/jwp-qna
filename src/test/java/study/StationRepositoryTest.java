package study;

import static org.assertj.core.api.Assertions.assertThat;

import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import study.manytoone.NoGeneratedIdStation;
import study.manytoone.NoGeneratedIdStationRepository;
import study.manytoone.Station;
import study.manytoone.StationRepository;

@SuppressWarnings("NonAsciiCharacters")
@DataJpaTest
@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
class StationRepositoryTest {

    @Autowired
    private StationRepository stations;

    @Autowired
    private NoGeneratedIdStationRepository notAutoGeneratedStations;

    @Nested
    class FindTest {

        @Test
        void 식별자를_통한_조회시_2차_캐시에_담긴_동일한_인스턴스가_그대로_조회됨() {
            final Station expected = stations.save(new Station("잠실역")); // INSERT 실행
            final Station actual = stations.findById(expected.getId()).get(); // SELECT 미실행
            assertThat(actual == expected).isTrue();
        }

        @Test
        void 식별자를_사용하지_않는_조회시_무조건_SELECT문_실행() {
            final Station expected = stations.save(new Station("잠실역")); // INSERT 실행
            final Station actual1 = stations.findByName("잠실역"); // SELECT 실행O
            final Station actual2 = stations.findByName("잠실역"); // SELECT 실행O

            assertThat(actual1).isEqualTo(expected);
            assertThat(actual2).isEqualTo(expected);
            assertThat(actual1 == actual2).isTrue(); // 2차 캐시에 담긴 동일한 엔티티
        }
    }

    @Nested
    class SaveTest {

        @Test
        void auto_increment되는_id_값을_DB에서_받아오기_위해_쓰기지연_없이_즉시_INSERT문_전송() {
            Station station1 = new Station("잠실역");
            assertThat(station1.getId()).isNull();
            stations.save(station1);
            assertThat(station1.getId()).isNotNull();

            Station station2 = new Station("선릉역");
            assertThat(station2.getId()).isNull();
            stations.save(station2);
            assertThat(station2.getId()).isNotNull();
        }

        @Test
        void auto_increment되는_id_값을_DB에서_받아오는_경우_어차피_롤백되더라도_즉시_INSERT문_전송() {
            stations.save(new Station("잠실역"));
        }

        @Test
        void save_호출시_엔티티의_id_값이_대입되었더라도_null_대입되어_DB의_PK_받아오며_별도의_영속_상태의_엔티티_생성하여_반환() {
            final Station station1 = new Station(100L, "잠실역");

            final Station station2 = stations.save(station1);

            assertThat(station1.getId()).isEqualTo(100L);
            assertThat(station2.getId()).isNotEqualTo(100L);
            assertThat(station1).isNotEqualTo(station2);
        }
    }

    @Nested
    class SaveWithoutGeneratedValueTest {

        @Test
        void GeneratedValue_어노테이션_없이_엔티티의_식별자_직접_저장시_INSERT문은_쓰기_지연_저장소에_관리되지만_SELECT문으로_해당_식별자의_엔티티_존재여부를_사전에_확인함() {
            // SELECT문 실행: 같은 id를 지닌 데이터의 존재 여부 확인
            notAutoGeneratedStations.save(new NoGeneratedIdStation(1000L, "잠실역"));
            notAutoGeneratedStations.save(new NoGeneratedIdStation(1001L, "선릉역"));
            // INSERT 쿼리 미전송
            System.out.println("####################");
            notAutoGeneratedStations.flush();
            // 쓰기 지연 저장소의 INSERT 문 일괄 전송
        }

        @Test
        void 어차피_롤백되는_경우_GeneratedValue_어노테이션_없으면_INSERT문_전송_과정_생략() {
            notAutoGeneratedStations.save(new NoGeneratedIdStation(1000L, "잠실역"));
        }
    }

    @Nested
    class UpdateTest {

        @Test
        void dirty_checking() {
            Station station1 = stations.save(new Station("잠실역")); // 스냅샷: 잠실역
            station1.changeName("몽촌토성역");  // 현재값: 몽촌토성역
            // (1) name은 식별자가 아니므로 영속성 컨텍스트를 거치지 않고, SELECT 즉시 실행하여 DB 접근 필요!
            // DB 접근을 위해 flush() 호출
            Station station2 = stations.findByName("몽촌토성역");
            // (2) flush()를 통해 영속성 컨텍스트와 DB를 동기화시키게 됨.
            // station1은 스냅샷과 현재 값이 다르므로 Update 즉시 실행.
            assertThat(station2).isNotNull();
        }

        @Test
        void 수정되었어도_flush_시점의_값과_스냅샷을_비교하여_UPDATE_실행_여부_판단() {
            Station station1 = stations.save(new Station("잠실역")); // 스냅샷: 잠실역
            station1.changeName("몽촌토성역");
            station1.changeName("잠실역"); // 현재값: 잠실역
            // (1) name은 식별자가 아니므로 영속성 컨텍스트를 거치지 않고, 일단 DB에 접근!
            Station station2 = stations.findByName("잠실역");
            // (2) flush() 호출되지만 스냅샷과 현재 상태 동일하므로 Update 미실행.
            assertThat(station2).isNotNull();
        }
    }
}
